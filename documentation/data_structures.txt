This document denotes all custom data structures implemented and utilized in this program, along with metadata regarding their respective methods and attributes.

1. attribute.py

Classes:

    Attribute:
	•	Attributes:
	•	name: The name of the attribute (e.g., “Preferred Language”).
	•	description: A description of the attribute.
	•	selections: A list of possible options for this attribute.
	•	compatibility_matrix: A dictionary representing the compatibility between different selections, indexed by selection pairs.
	•	weight: A weight between 0 and 1 indicating the importance of this attribute for compatibility.
	•	s_indices: A dictionary mapping selections to their indices for quick lookups.
	•	Methods:
	•	__str__(): Returns a string representation of the attribute’s name, description, and weight.
	•	get_selections_score(s1, s2): Returns the compatibility score between two selections from the compatibility matrix.
	•	get_weight(): Returns the attribute’s weight.

    Attributes:
	•	Attributes:
	•	active: A list of active attributes selected from the available options.
	•	inactive: A list of optional but inactive attributes.
	•	options: A list of all possible attributes from the configuration file.
	•	Methods:
	•	get_active: Returns the list of active attributes.
	•	get_inactive: Returns the list of inactive attributes.
	•	get_options: Returns the list of all available attribute options.

2. person.py

Class:

    Person:
	•	Attributes:
	•	name: The name of the person.
	•	sid: A unique identifier for the person.
	•	selections: A dictionary mapping each Attribute to the person’s selected option.
	•	flexibility_scores: A dictionary mapping each Attribute to the person’s flexibility score (1-10 scale).
	•	group: The group to which the person is assigned (initialized to None).
	•	Methods:
	•	__str__(): Returns the person’s name and SID.
	•	get_flexibility(attribute): Retrieves the flexibility score for a given attribute, defaulting to 10 if not set.
	•	get_selection(attribute): Retrieves the selected option for a given attribute.
	•	update_selection(attribute, selection): Updates the selected option for an attribute, ensuring it’s valid.
	•	update_flexibility(attribute, score): Updates the flexibility score for a given attribute (must be between 1-10).
	•	all_selections: Returns a copy of the person’s selections.
	•	all_flexibility_scores: Returns a copy of the person’s flexibility scores.

3. pair.py

Class:

    Pair:
	•	Attributes:
	•	p1, p2: The two Person objects forming the pair.
	•	attributes: An Attributes object containing the active attributes.
	•	_selection_scores_raw: A dictionary storing raw compatibility scores for each attribute.
	•	_selection_scores: A dictionary storing adjusted compatibility scores based on flexibility.
	•	Methods:
	•	_initialize_scores(): Initializes the raw and adjusted compatibility scores for each active attribute.
	•	_get_attribute_pcs_raw(attribute): Computes the raw compatibility score for a given attribute.
	•	_get_attribute_pcs(attribute, raw_score): Adjusts the raw compatibility score based on flexibility.
	•	PCS_raw(): Returns the weighted raw compatibility score across all active attributes.
	•	PCS(): Returns the weighted adjusted compatibility score across all active attributes.
	•	selection_scores_raw(): Returns a copy of the raw selection scores.
	•	selection_scores(): Returns a copy of the adjusted selection scores.

4. group.py

Class:

    Group:
	•	Attributes:
	•	members: A list of Person objects in the group.
	•	min_size, max_size: Minimum and maximum size constraints for the group.
	•	_pcs_dict: A dictionary to store pairwise compatibility scores.
	•	_GCS: The overall group compatibility score.
	•	_PCS_variance: The variance of pairwise compatibility scores within the group.
	•	cohort: The Cohort object to which the group belongs.
	•	Methods:
	•	add_member(person): Adds a new member to the group and updates compatibility scores.
	•	add_pair(pair): Adds a pair to the group, ensuring neither is already assigned to a group.
	•	remove_member(person): Removes a member from the group and updates scores.
	•	compute_GCS(): Computes the group’s overall compatibility score by averaging pairwise scores.
	•	compute_PCS_variance(): Calculates the variance of pairwise compatibility scores within the group.
	•	get_most_compatible_pair(): Returns the most compatible pair in the group based on pairwise scores.
	•	get_least_compatible_pair(): Returns the least compatible pair in the group based on pairwise scores.
	•	size(): Returns the current size of the group.
	•	all_members(): Returns a copy of the group’s members.

5. cohort.py

Class:

    Cohort:
	•	Attributes:
	•	_people: A list of Person objects in the cohort.
	•	_attributes: An Attributes object containing the cohort’s active attributes.
	•	_pairs: A dictionary of Pair objects for all unique combinations of people.
	•	nMax, nMin: Maximum and minimum group sizes.
	•	_groups: A list of Group objects.
	•	_nGroups: The total number of groups in the cohort.
	•	_GCS_mean: The mean group compatibility score across all groups.
	•	_GCS_variance: The variance of group compatibility scores across groups.
	•	Methods:
	•	_load_pairs(people): Initializes a dictionary of all possible Pair objects.
	•	find_pair(p1, p2): Retrieves an existing pair or creates a new one if it doesn’t exist.
	•	allocate_groups_greedy(): Allocates groups using a greedy approach to maximize compatibility.
	•	allocate_groups_SA(): Optimizes group allocation using Simulated Annealing to minimize compatibility variance.
	•	compute_GCS_variance(): Calculates the variance of group compatibility scores across groups.
	•	people(): Returns a copy of the list of people in the cohort.
	•	pairs(): Returns a copy of the dictionary of pairs in the cohort.
	•	groups(): Returns a copy of the list of groups in the cohort.
	•	GCS_mean(): Returns the mean group compatibility score.
	•	GCS_variance(): Returns the variance of group compatibility scores.
	•	nGroups(): Returns the number of groups in the cohort.